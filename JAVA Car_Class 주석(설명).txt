## 이동 메서드 분석

이 코드는 자동차를 상속받아 승용차, 스포츠카, 버스를 만들고 설정 정보에 따라 기능을 구현하고 결과를 출력하는 프로그램입니다.

- **`CarMain` 클래스:** 프로그램의 진입점입니다. 사용자로부터 이동 지역, 승객 수, 이동 차량, 부가 기능을 입력 받고, 입력에 따라 적절한 자동차 객체를 생성하고 결과를 출력합니다.
- **`Car` 클래스:** 자동차의 기본 속성과 기능을 정의합니다. 이름, 속도, 연비, 연료 탱크 크기, 좌석 수를 멤버 변수로 갖고 있으며, 자동차 이동 시간 및 연료 소비량을 계산하는 메서드를 포함합니다.
- **`SportsCar`, `Sedan`, `Bus` 클래스:** `Car` 클래스를 상속받아 각각 스포츠카, 승용차, 버스를 나타냅니다. 각 클래스에서는 생성자를 통해 차량의 속성을 초기화하고, 부가 기능에 따라 속성을 변경합니다.
- **`Car.sub()` 메서드:** 주어진 이동 지역과 승객 수에 따라 차량의 총 비용, 주유 횟수, 이동 시간을 계산하여 출력합니다.

사용자로부터 입력을 받고, 그에 따라 객체를 생성하여 각 객체의 메서드를 호출하여 출력하는 구조로 이루어져 있습니다.

### 목표
이동 메서드는 입력된 목적지와 승객 수, 부가 기능 여부에 따라 자동차의 이동에 필요한 정보를 계산하고 출력하는 기능을 제공합니다.

### 기능 설명
1. 이동 메서드는 목적지, 승객 수, 부가 기능 여부를 입력으로 받아 이동에 필요한 정보를 계산합니다.
2. 계산된 정보에 따라 총 비용, 총 주유 횟수, 총 이동 시간을 출력합니다.
3. 이동 메서드는 자동차 객체의 이름을 출력하고, 계산된 정보를 사용하여 출력합니다.

### 메서드 설명
1. `move(String destination, int passengers, boolean additionalFeature)`
   - 입력: 목적지, 승객 수, 부가 기능 여부
   - 출력: 없음
   - 동작:
     - 목적지에 따른 총 이동 거리를 계산합니다.
     - 이동에 필요한 총 비용을 계산합니다.
     - 이동에 필요한 총 주유 횟수를 계산합니다.
     - 이동에 필요한 총 이동 시간을 계산합니다.
     - 계산된 정보를 출력합니다.

### 변수 설명
1. `destination`: 이동할 목적지
2. `passengers`: 이동할 승객 수
3. `additionalFeature`: 부가 기능의 여부 (ON/OFF)
4. `distance`: 목적지까지 거리
5. `fuelConsumption`: 연비소비 : 거리 / 연비
6. `count`: 총 연료 비용 : 연료소비 * 편도횟수
7. `totalCost`: 총 비용 : 총 연료 비용 * 2000(리터당 연비).
8. `totalRefuel`: 총 주유 횟수 : 총 연료 비용 / 탱크용량
9. 'Hour':총 시간 : 총 거리 / 속도
10.'Minute': // '분' 계산

### 출력 설명
1. `System.out.println("====== " + name + " ======")`: 자동차 객체의 이름을 출력합니다.
2. `System.out.println("총 비용 : " + totalCost + "원")`: 이동에 필요한 총 비용을 출력합니다.
3. `System.out.println("총 주유 횟수 : " + totalRefuel + "회")`: 이동에 필요한 총 주유 횟수를 출력합니다.
4. `System.out.println("총 이동 시간 : " + Hour + "시간 " + Minute + "분")`: 이동에 필요한 총 이동 시간을 시간과 분 단위로 출력합니다.

### 예외 처리
1. 입력된 목적지가 유효한지 확인해야 합니다.
2. 입력된 승객 수가 유효한지 확인해야 합니다.
3. 부가 기능의 입력 값이 유효한지 확인해야 합니다.

### 최적화
1. 반복되는 연산을 최소화하여 성능을 향상시킬 수 있습니다.
2. 계산식을 단순화하여 코드를 간결하게 만들 수 있습니다.
3. 메서드의 유효성 검사를 추가하여 오류를 방지할 수 있습니다.
4. 출력 포맷을 조정하여 보다 명확한 결과를 제공할 수 있습니다.

위의 내용을 고려하여 코드를 최적화하고, 출력 결과를 올바르게 출력할 수 있도록 수정할 수 있습니다.

### 주요 기능 설명

1. **메인 메서드**
    - 사용자로부터 이동 지역, 승객 수, 차량 선택, 부가 기능 입력을 받습니다.
    - 입력에 따라 해당 차량 객체를 생성하고 이동 메서드를 호출합니다.
    - 이동이 완료되면 사용자에게 계속 이동할지 여부를 묻습니다.

2. **이동 메서드**
    - 입력된 목적지와 승객 수를 바탕으로 이동에 필요한 정보를 계산합니다.
    - 이동에 필요한 총 비용, 총 주유 횟수, 총 이동 시간을 출력합니다.

3. **자동차 클래스**
    - 자동차 클래스는 모든 차 